import 'dart:typed_data';

import 'package:test/test.dart';
import 'package:yubikit_openpgp/tlv.dart';
import 'package:yubikit_openpgp/utils.dart';

void main() {
  test('Parses simple TLV value', () async {
    final Uint8List data = Uint8List.fromList([0x60, 0x02, 0x01, 0x03]);
    final Tlv tlv = Tlv.parse(data, offset: 0);
    expect(tlv.tag, equals(0x60));
    expect(tlv.offset, equals(0x02));
    expect(tlv.end, equals(0x04));
    expect(tlv.length, equals(0x02));
  });

  test('Parses simple TLV data value as map', () async {
    final Uint8List data = Uint8List.fromList([0x60, 0x02, 0x01, 0x03]);
    final TlvData tlvData = TlvData.parse(data);
    expect(tlvData.getValue(0x60), equals(Uint8List.fromList([0x01, 0x03])));
  });

  test('Parses multiple TLV values', () async {
    final Uint8List data = Uint8List.fromList(
        [0x60, 0x02, 0x01, 0x03, 0x61, 0x01, 0x01, 0x62, 0x00]);
    final TlvData tlvData = TlvData.parse(data);
    expect(tlvData.getValue(0x60), equals(Uint8List.fromList([0x01, 0x03])));
    expect(tlvData.getValue(0x61), equals(Uint8List.fromList([0x01])));
    expect(tlvData.getValue(0x62), equals(Uint8List.fromList([])));
  });

  test('Parses long response TLV values', () async {
    Uint8List data = Uint8List.fromList([
      0x7f,
      0x49,
      0x82,
      0x01,
      0x09,
      0x81,
      0x82,
      0x01,
      0x00,
      0xb4,
      0xdd,
      0x22,
      0x74,
      0xd9,
      0xea,
      0xd7,
      0xb2,
      0xa0,
      0xc4,
      0x6a,
      0x51,
      0xea,
      0x27,
      0x87,
      0xdd,
      0xfd,
      0xdd,
      0x38,
      0xaa,
      0x97,
      0x10,
      0x37,
      0x98,
      0xbe,
      0x47,
      0xa0,
      0x4a,
      0xac,
      0x9f,
      0x09,
      0x2a,
      0x44,
      0xd4,
      0x4b,
      0x13,
      0x33,
      0xd3,
      0x76,
      0xb1,
      0xe3,
      0x80,
      0x03,
      0x1d,
      0x88,
      0x9f,
      0xe7,
      0x10,
      0x07,
      0x57,
      0x52,
      0x41,
      0xda,
      0xfd,
      0x05,
      0xe8,
      0x1d,
      0xfa,
      0xe6,
      0xd4,
      0x26,
      0xaa,
      0x12,
      0x22,
      0xb4,
      0xa3,
      0xe6,
      0x69,
      0x34,
      0x5c,
      0x17,
      0x05,
      0xc6,
      0x0b,
      0x74,
      0x16,
      0x41,
      0x5a,
      0xc3,
      0x3b,
      0xed,
      0x78,
      0x78,
      0x9f,
      0xae,
      0x86,
      0x4f,
      0xee,
      0x4e,
      0x4f,
      0x94,
      0x42,
      0x00,
      0x6e,
      0xb1,
      0x1f,
      0xb7,
      0x5b,
      0x72,
      0x48,
      0x2c,
      0x45,
      0xa5,
      0x4b,
      0x2d,
      0x52,
      0x64,
      0x62,
      0x68,
      0xb0,
      0x4c,
      0x61,
      0x1d,
      0x8b,
      0x6f,
      0x3b,
      0xaa,
      0x6a,
      0x17,
      0x90,
      0x14,
      0xd7,
      0xcc,
      0x9e,
      0x7f,
      0xf0,
      0x46,
      0x44,
      0xf1,
      0x96,
      0x62,
      0xb3,
      0x8b,
      0x2b,
      0x81,
      0x07,
      0x1d,
      0xd3,
      0x22,
      0x00,
      0xa0,
      0xeb,
      0x01,
      0x7b,
      0x9a,
      0xf9,
      0x25,
      0x30,
      0x41,
      0x34,
      0x3d,
      0x39,
      0x8d,
      0xa1,
      0x40,
      0x08,
      0xb4,
      0xe6,
      0x25,
      0x32,
      0x35,
      0xb4,
      0xcc,
      0x4e,
      0x00,
      0x4f,
      0x7e,
      0x99,
      0x11,
      0x0c,
      0xf4,
      0x69,
      0xe1,
      0x14,
      0x25,
      0x30,
      0x41,
      0x68,
      0xdc,
      0x79,
      0x97,
      0x98,
      0x46,
      0xfe,
      0x8a,
      0x45,
      0x78,
      0x9d,
      0x9a,
      0x27,
      0xe5,
      0xa9,
      0xa0,
      0x8a,
      0xb5,
      0x2c,
      0xbc,
      0x2b,
      0x46,
      0xde,
      0x68,
      0x72,
      0x53,
      0xa2,
      0x94,
      0xeb,
      0xd2,
      0xc8,
      0xd1,
      0x09,
      0x44,
      0x72,
      0x31,
      0x13,
      0x08,
      0xd4,
      0x63,
      0x85,
      0xda,
      0x1a,
      0xfa,
      0xc1,
      0xd2,
      0xf2,
      0xb7,
      0xe4,
      0x2e,
      0x6c,
      0x96,
      0xe5,
      0xe1,
      0x57,
      0xce,
      0x4b,
      0xbe,
      0x11,
      0x8a,
      0xe2,
      0x24,
      0xfd,
      0x60,
      0x74,
      0xc7,
      0xf5,
      0x28,
      0x2f,
      0x12,
      0x5e,
      0x12,
      0x35,
      0x84,
      0xfc,
      0x42,
      0x59,
      0x0e,
      0x6f,
      0x48,
      0x46,
      0xc7,
      0xd3,
      0x35,
      0xa9,
      0x82,
      0x03,
      0x01,
      0x00,
      0x01,
    ]);
    data = Uint8List.fromList(PGPUtils.percentUnescape(data));
    // Tag is 0x7f49
    expect(data[0], equals(0x7f));
    expect(data[1], equals(0x49));
    // After tag we have length
    final bodyLength = data[2];
    //Body Length is greater than 0x80
    expect(bodyLength, greaterThan(0x80));
    // If length is greater than 0x80 then it is encoded in multiple bytes, the amount over 0x80 says how many.
    final lengthBytes = bodyLength - 0x80;
    // Length is encoded in 2 bytes
    expect(lengthBytes, equals(2));
    // Get 2 byte value as int16
    final fullBodyLength = ByteData(2)
      ..setUint8(0, data[3])
      ..setUint8(1, data[4]);
    // Skip the header and check the length value
    expect(data.sublist(5).length, equals(fullBodyLength.getInt16(0)));
    // Modulus starts after length (0x81)
    expect(data[5], equals(0x81));
    // Modulus length is 4096 bits or 512 bytes which is hex 200 so more than two bytes for length
    expect(data[6], greaterThan(0x80));
    final modulusLengthBytes = data[6] - 0x80;
    expect(modulusLengthBytes, equals(2));
    // Get 2 byte value as int16
    final fullModulusLength = ByteData(2)
      ..setUint8(0, data[7])
      ..setUint8(1, data[8]);
    expect(fullModulusLength.getUint16(0), equals(256));
    // Public exponent (0x82) starts after modulus
    final int peIndex = 9 + 256;
    expect(data[peIndex], equals(0x82));
    // Public exponent is short, usually 65537
    expect(data[peIndex + 1], lessThan(0x80));
    //65537 is 3 bytes: 01 00 01
    expect(data[peIndex + 1], equals(3));
    expect(data.sublist(peIndex + 2, peIndex + 5), equals([0x1, 0x00, 0x1]));
  });
}
